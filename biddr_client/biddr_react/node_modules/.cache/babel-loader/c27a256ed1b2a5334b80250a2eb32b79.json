{"ast":null,"code":"var _jsxFileName = \"/home/chinmaya/Final_Exam/biddr_client/biddr_react/src/components/FormErrors.js\";\nimport React from 'react';\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormErrors = props => {\n  const {\n    errors = [],\n    forField\n  } = props;\n  let filteredErrors = errors;\n\n  if (forField) {\n    console.log(`Errors: ${filteredErrors}`);\n    filteredErrors = errors.filter(err => err.field.toLowerCase() === forField.toLowerCase());\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"FormErrors\",\n    children: filteredErrors.map((error, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [error.field, \": \", error.message]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 25\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 13\n  }, this);\n};\n\n_c = FormErrors;\nexport default FormErrors;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormErrors\");","map":{"version":3,"sources":["/home/chinmaya/Final_Exam/biddr_client/biddr_react/src/components/FormErrors.js"],"names":["React","FormErrors","props","errors","forField","filteredErrors","console","log","filter","err","field","toLowerCase","map","error","i","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAEC,IAAAA,MAAM,GAAG,EAAX;AAAeC,IAAAA;AAAf,MAA4BF,KAAlC;AAEA,MAAIG,cAAc,GAAGF,MAArB;;AAEA,MAAGC,QAAH,EAAY;AACNE,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUF,cAAe,EAAtC;AACAA,IAAAA,cAAc,GAAGF,MAAM,CAACK,MAAP,CACXC,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAUC,WAAV,OAA4BP,QAAQ,CAACO,WAAT,EADxB,CAAjB;AAGL;;AAED,sBACM;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA,cACON,cAAc,CAACO,GAAf,CAAmB,CAACC,KAAD,EAAQC,CAAR,kBACd;AAAA,iBACOD,KAAK,CAACH,KADb,QACsBG,KAAK,CAACE,OAD5B;AAAA,OAASD,CAAT;AAAA;AAAA;AAAA;AAAA,YADL;AADP;AAAA;AAAA;AAAA;AAAA,UADN;AASL,CArBD;;KAAMb,U;AAuBN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport \"../index.css\";\n\nconst FormErrors = props => {\n      const { errors = [], forField } = props;\n\n      let filteredErrors = errors;\n\n      if(forField){\n            console.log(`Errors: ${filteredErrors}`)\n            filteredErrors = errors.filter(\n                  err => err.field.toLowerCase() === forField.toLowerCase()\n            );\n      }\n\n      return(\n            <ul className=\"FormErrors\"> \n                  {filteredErrors.map((error, i) => (\n                        <li key={i}>\n                              {error.field}: {error.message}\n                        </li>\n                  ))}\n            </ul>\n      )\n}\n\nexport default FormErrors;"]},"metadata":{},"sourceType":"module"}